*                                                                     * 00010
*          COPIED FROM THE CBT TAPE 07/17/84.                         * 00010
*          CALLING EXAMPLE IS IN MEMBER CALLCIPH                      * 00010
*                                                                     * 00010
*                                                                     * 00010
*          DATA SET R050A90    AT LEVEL 002 AS OF 01/23/81            * 00010
*          DATA SET R050A90    AT LEVEL 001 AS OF 01/22/81            * 00001
*          DATA SET ENCIPH0    AT LEVEL 001 AS OF 03/18/77            * 00002
         TITLE 'ENCIPHER AND DECIPHER ROUTINE'                          00003
R050A90  CSECT                                                          00004
*********************************************************************** 00005
*        WRITTEN BY CRAIG KILLE OF FAIRCHILD SEMICONDUCTOR 5/5/76     * 00006
*        USING THE DATA ENCRYPTION ALGORITHM SUBMITTED BY IBM TO      * 00007
*        THE NATIONAL BUREAU OF STANDARDS AND PUBLISHED IN THE        * 00008
*        FEDERAL REGISTER, VOL. 40, NO. 52 - MONDAY, MARCH 17, 1975.  * 00009
*                                                                     * 00010
*        THE GENERAL PROCEDURE FOR USE IS TO:                         * 00011
*        (1) CALL THE SETKEY FUNCTION FROM A HOST PROGRAM, PASSING    * 00012
*            THE START ADDRESS OF THE 8 BYTE KEY TO BE USED IN ALL    * 00013
*            SUBSEQUENT ENCIPHERING AND/OR DECIPHERING CALLS.         * 00014
*                                                                     * 00015
*            COBOL EXAMPLE: CALL 'SETKEY' USING KEY-FIELD.            * 00016
*                                                                     * 00017
*            THE KEY FIELD WITHIN THE HOST PROGRAM IS LEFT UNCHANGED. * 00018
*            THE CALL TO SETKEY NEED BE MADE ONLY ONCE PER EXECUTION  * 00019
*            OF THE HOST PROGRAM, UNLESS IT IS DESIRED TO CHANGE      * 00020
*            THE KEY FOR DEFINED GROUPS OF RECORDS, OR TO DECIPHER    * 00021
*            OR ENCIPHER TWO OR MORE FILES WITHIN THE SAME PROGRAM.   * 00022
*            IN THE LATTER CASE, IF THE CALLS TO ENCIPH/DECIPH ARE    * 00023
*            INTERMIXED FOR THE FILES, A CALL TO SETKEY WILL HAVE     * 00024
*            TO BE MADE BEFORE EACH ENCIPH/DECIPH CALL TO SET UP      * 00025
*            THE KEY PERMUTATIONS APPROPRIATE TO EACH FILE.           * 00026
*                                                                     * 00027
*        (2) CALL THE ENCIPH/DECIPH FUNCTIONS AS NEEDED TO ENCIPHER   * 00028
*            A DATA RECORD BEFORE WRITING IT TO A DATASET, OR         * 00029
*            DECIPHER A DATA RECORD AFTER READING IT FROM A DATASET.  * 00030
*            THE ARGUMENTS PASSED ARE THE START ADDRESS OF THE DATA   * 00031
*            AREA TO ENCIPHER OR DECIPHER, AND THE ADDRESS OF A       * 00032
*            FULL WORD BINARY COMPUTATIONAL ITEM THAT CONTAINS THE    * 00033
*            COUNT OF BYTES TO ENCIPHER OR DECIPHER.  THE RESULT      * 00034
*            REPLACES THE ORIGINAL DATA; THE COMPUTATIONAL ITEM       * 00035
*            REMAINS UNCHANGED.                                       * 00036
*                                                                     * 00037
*            COBOL EXAMPLE: CALL 'ENCIPH' USING REC-AREA LENGTH56.    * 00038
*                           CALL 'DECIPH' USING REC-AREA LENGTH72.    * 00039
*                                                                     * 00040
*            SINCE THE ALGORITHM WORKS ON 8 BYTES AT A TIME, THE      * 00041
*            ACTUAL NUMBER OF BYTES ENCIPHERED OR DECIPHERED WILL     * 00042
*            BE AN INTEGRAL NUMBER OF 8 BYTES THAT IS LESS THAN       * 00043
*            OR EQUAL TO THE NUMBER PASSED IN ARG2 OF THE CALL.       * 00044
*            THE GREATEST NUMBER OF BYTES LEFT UNENCIPHERED OR        * 00045
*            DECIPHERED THEN WOULD BE THE RIGHTMOST 7 BYTES.          * 00046
*                                                                     * 00047
* MOD 1 - K TRUE  22JAN81 - CORRECTED BNP TO BM INSTR TO ALLOW 8 BYTE * 00048
*                           FIELD LENGTH TO BE PROCESSED.             * 00049
*********************************************************************** 00050
         EJECT                                                          00051
*********************************************************************** 00052
*        REGISTER USAGE                                               * 00053
*                                                                     * 00054
*        R1=ADDR OF 1ST BYTE TO ENCIPHER OR DECIPHER                  * 00055
*        R2=INCR REG. FOR R1 -- 8 BYTES EN/DECIPHERED AT A TIME       * 00056
*        R3=ADDR OF LAST 8 BYTE BLOCK TO EN/DECIPHER                  * 00057
*        R4=SCRATCH                                                   * 00058
*        R5=SCRATCH                                                   * 00059
*        R6=SCRATCH                                                   * 00060
*        R7=BYTE ADDR IN PERM0 TO STORE & SCRATCH                     * 00061
*        R8=INCR REG. FOR R7 -- CONTAINS -1                           * 00062
*        R9=ADDR-1 OF LEFTMOST BYTE OF PERM0                          * 00063
*        RA=SCRATCH                                                   * 00064
*        RB=POINTER TO S1,S2,...S8 CIPHER TABLE                       * 00065
*        RC=BASE ADDRESS REGISTER                                     * 00066
*        RD=CONTAINS INTERATION 1...16 FOR FUNCTION PERFORMANCE COUNT * 00067
*        RE=SCRATCH                                                   * 00068
*        RF=SCRATCH                                                   * 00069
*********************************************************************** 00070
R1       EQU   1                                                        00071
R2       EQU   2                                                        00072
R3       EQU   3                                                        00073
R4       EQU   4                                                        00074
R5       EQU   5                                                        00075
R6       EQU   6                                                        00076
R7       EQU   7                                                        00077
R8       EQU   8                                                        00078
R9       EQU   9                                                        00079
RA       EQU   10                                                       00080
RB       EQU   11                                                       00081
RC       EQU   12                                                       00082
RD       EQU   13                                                       00083
RE       EQU   14                                                       00084
RF       EQU   15                                                       00085
**********************************************************************  00086
*        ROUTINE STARTS HERE.                                        *  00087
*        SAVE REGS., SET UP SAVE AREA, & ESTABLISH ADDRESSABILITY    *  00088
**********************************************************************  00089
         ENTRY SETKEY                                                   00090
         ENTRY ENCIPH                                                   00091
         ENTRY DECIPH                                                   00092
         USING *,RF                                                     00093
SETKEY   SAVE  (14,12),,*                                               00094
         LA    RE,8           CODE 8 FOR SETKEY                         00095
         L     RC,BASEADDR                                              00096
         B     INIT                                                     00097
         DS    0F                                                       00098
         USING *,RF                                                     00099
ENCIPH   SAVE  (14,12),,*                                               00100
         SR    RE,RE          CODE 0 FOR ENCIPH                         00101
         L     RC,BASEADDR                                              00102
         B     INIT                                                     00103
         DS    0F                                                       00104
         USING *,RF                                                     00105
DECIPH   SAVE  (14,12),,*                                               00106
         LA    RE,4           CODE 4 FOR DECIPH                         00107
         L     RC,BASEADDR                                              00108
         B     INIT                                                     00109
         DROP  RF                                                       00110
         USING R050A90,RC                                               00111
INIT     LR    2,13                                                     00112
         LA    13,SAVEAREA                                              00113
         ST    2,SAVEAREA+4                                             00114
         ST    13,8(,2)                                                 00115
         B     COMMTAB(RE)    BRANCH TO APPROPRIATE ROUTINE             00116
BASEADDR DC    A(R050A90)                                               00117
COMMTAB  B     ENDECIPH                                                 00118
         B     ENDECIPH                                                 00119
*        BRANCH DIRECTLY TO NEXT INSTR. ON SETKEY                       00120
         EJECT                                                          00121
**********************************************************************  00122
*        BUILD 16 KEY PERMUTATIONS FROM ORIGINAL 8 BYTE KEY          *  00123
**********************************************************************  00124
         L     R4,0(R1)       (R4)=ADDR OF 8 BYTE KEY PASSED            00125
         ICM   R6,15,0(R4)    LOAD FIRST 4 BYTES OF KEY                 00126
         ICM   R7,15,4(R4)    LOAD SECOND 4 BYTES OF KEY                00127
         L     R8,MINUS1      LOAD INCR REG FOR BXH                     00128
         LA    R5,KEY64+63    LOAD LAST BYTE ADDRESS                    00129
         LA    R9,KEY64-1     LOAD ADDR-1 OF LEFTMOST BYTE              00130
STOREKEY STC   R7,0(R5)       SET UP KEY AS 64 BYTES RATHER THAN BITS   00131
         SRDL  R6,1           SHIFT IN NEXT BIT                         00132
         BXH   R5,R8,STOREKEY                                           00133
*********************************************************************** 00134
*        PERFORM CHOICE 1 PERMUTATION ON 64 BYTE KEY FOR 56 BYTE KEY  * 00135
*********************************************************************** 00136
         MVC   KEY56,CHOICE1P MOVE IN PATTERN TO EXTRACT KEY            00137
         TR    KEY56,KEY64    SCRAMBLE ORIGINAL KEY                     00138
*********************************************************************** 00139
*        NOW PREPARE A 48 BYTE KEY TO EXCLUSIVE OR TO THE 48 BYTES    * 00140
*        I WILL CREATE FROM THE RIGHTSIDE OF PERM1 WHEN WORKING       * 00141
*        WITH THE DATA TO ENCIPHER OR DECIPHER.                       * 00142
*********************************************************************** 00143
         SR    RD,RD          SET UP KEYS FOR RD = 0 TO 15              00144
NEXTKEY  C     RD,=F'2'       IF RD IS 0,1,8, OR 15 SHIFT ONCE          00145
         BL    SHIFT1         OTHERWISE SHIFT TWICE.                    00146
         C     RD,=F'8'                                                 00147
         BL    SHIFT2                                                   00148
         BE    SHIFT1                                                   00149
         C     RD,=F'15'                                                00150
         BE    SHIFT1                                                   00151
SHIFT2   LA    R4,2           LOAD COUNT TO SHIFT                       00152
         B     SHIFTIT                                                  00153
SHIFT1   LA    R4,1                                                     00154
SHIFTIT  MVC   KEY56-1,KEY56  SHIFT WHOLE KEY LEFT 1 BYTE               00155
         MVC   BYTE56,BYTE28  AND SIMULATE CIRCULAR SHIFT OF BOTH       00156
         MVC   BYTE28,BYTEOUT HALVES OF KEY56 BY STUFFING BYTES.        00157
         BCT   R4,SHIFTIT     GO DO AGAIN IF NECESSARY                  00158
*********************************************************************** 00159
*        PERFORM CHOICE 2 ON KEY56 BY EXTRACTING 48 BYTE KEY          * 00160
*********************************************************************** 00161
         MVC   KEY48,CHOICE2P MOVE IN PATTERN TO EXTRACT 48 BYTES       00162
         TR    KEY48,KEY56    EXTRACT                                   00163
         LR    RF,RD          COMPUTE AREA ADDR FOR STORE               00164
         M     RE,=F'48'      MULTIPLY BY WIDTH OF KEY                  00165
         LA    RE,KEY0(RF)    ADD IN BASE ADDR OF KEY0                  00166
         MVC   0(48,RE),KEY48 MOVE KEY TO CORRECT AREA                  00167
         LA    RD,1(RD)       INCREMENT RD                              00168
         C     RD,=F'15'                                                00169
         BNH   NEXTKEY                                                  00170
         B     EXUENT         ALL DONE MY JOB, NOW EXIT                 00171
         EJECT                                                          00172
*********************************************************************** 00173
*        COMMON CODE FOR ENCIPHER AND DECIPHER.  ONLY DIFFERENCE      * 00174
*        IS WHETHER TO USE KEYS 0-15 (ENCIPH) OR 15-0 (DECIPH).       * 00175
*********************************************************************** 00176
ENDECIPH ST    RE,MODE        SAVE MODE I CAME IN WITH                  00177
         LM    R2,R3,0(R1)    LOAD ADDR OF 1ST BYTE & LENGTH            00178
         L     R3,0(R3)       (R2)=ADDR OF START, (R3) = LENGTH         00179
         N     R3,STRIP       MAKE SURE LENGTH IS MULTIPLE OF 8 BYTES   00180
         S     R3,=F'8'       GET LENGTH MINUS EIGHT                    00181
         BM    EXUENT         LEN < 0, FORGET IT                KMTMOD1 00182
         LR    R1,R2          LOAD START ADDRESS IN REG. 1              00183
         AR    R3,R2          ADD IN LENGTH-8 FOR ADDR OF LAST 8 BYTES  00184
         LA    R2,8           LOAD INCREMENT REGISTER                   00185
         L     R8,MINUS1      LOAD DECREMENT REG. USED THRUOUT FOR BXH  00186
*********************************************************************** 00187
*        GRAB NEXT 8 BYTES POINTED TO BY REG. 1 AND SPLIT THE 32 BITS * 00188
*        IN THOSE 8 BYTES INTO 32 BYTES SO I CAN USE THE TR INST. TO  * 00189
*        DO THE HARD WORK OF SHIFTING EVERYBODY AROUND.  I MAKE NO    * 00190
*        ATTEMPT TO ELIMINATE ALL BUT THE RIGHTMOST BIT IN EACH BYTE  * 00191
*        STORED, BECAUSE THESE OTHER BITS ARE IRRELEVANT IN ALL       * 00192
*        PROCESS STEPS, AND ARE DISCARDED ON OUTPUT.                  * 00193
*********************************************************************** 00194
NEXT8BYT LA    R9,PERM0-1                                               00195
         LA    R7,64(R9)      R7 INIT. POINTS TO RIGHTMOST BYTE PERM0   00196
         ICM   R4,15,0(R1)    LOAD 8 BYTES INTO R4 AND R5, ASSUMING     00197
         ICM   R5,15,4(R1)    NO ALLIGNMENT OTHER THAN BYTE             00198
BITSTORE STC   R5,0(R7)       STORE BYTE (RIGHTMOST BIT,ONLY,IMPORTANT) 00199
         SRDL  R4,1           SHIFT IN NEXT BIT                         00200
         BXH   R7,R8,BITSTORE POINT TO PRIOR BYTE IN PERM0 AND REDO     00201
*********************************************************************** 00202
*        PERMUTATION 1: SCRAMBLE ORIGINAL 64 BITS (BYTES NOW)         * 00203
*********************************************************************** 00204
         MVC   PERM1,PERM1PAT MOVE IN PATTERN TO SCRAMBLE               00205
         TR    PERM1,PERM0    SCRAMBLE PERM0 INTO PERM1                 00206
         L     RE,MODE        DO ITERATION 0-15 FOR ENCIPH,15-0 DECIPH  00207
         B     STARTAB(RE)                                              00208
STARTAB  B     STENCIPH                                                 00209
         LA    RD,15                                                    00210
         B     NEXTITER                                                 00211
STENCIPH SR    RD,RD                                                    00212
*********************************************************************** 00213
*        MAIN LOOP OF PROGRAM WHERE 16 ITERATIONS OF BASTARDIZATION   * 00214
*        ARE PERFORMED.  AND WITH A SLIGHT OF HAND, GARBAGE RESULTS.  * 00215
*        FIRST PERFORM FUNCTION 'E' WHICH EXPANDS THE RIGHTMOST 32    * 00216
*        BYTES OF PERM1 INTO 48.                                      * 00217
*********************************************************************** 00218
NEXTITER MVC   RIGHT48,RIGHT48P MOVE IN PATTERN TO EXPAND               00219
         TR    RIGHT48,PERM1+32 EXPAND RIGHTMOST 32 BYTES TO 48         00220
**********************************************************************  00221
*        GET APPROPRIATE KEY TO EXCLUSIVE OR                         *  00222
**********************************************************************  00223
         LR    RF,RD          COMPUTE KEY ADDR                          00224
         M     RE,=F'48'                                                00225
         LA    RE,KEY0(RF)                                              00226
         EJECT                                                          00227
*********************************************************************** 00228
*        EXCLUSIVE OR THE 48 BYTE RESULTS OF FUNCTION 'E' AND THE KEY * 00229
*        EXTRACTION.                                                  * 00230
*********************************************************************** 00231
         XC    RIGHT48,0(RE)                                            00232
*********************************************************************** 00233
*        TREAT THIS RESULT (IN RIGHT48) AS 8 6-BYTE BLOCKS.           * 00234
*        TRANSLATE SO BYTE 0 & 5 OF EACH BLOCK BECOME BYTE 0 & 1      * 00235
*        AND BYTES 1 TO 4 BECOME BYTES 2-5.                           * 00236
*********************************************************************** 00237
         MVC   KEY48,TICKLE   MOVE IN PATTERN TO TICKLE                 00238
         TR    KEY48,RIGHT48  TICKLE                                    00239
*********************************************************************** 00240
*        NOW, UNFORTUNATELY, I HAVE TO TURN THE BYTES BACK INTO BITS  * 00241
*        SO THAT I CAN FORM A SIX BIT KEY FOR TABLE LOOK UP INTO      * 00242
*        THE TABLES S1,S2,...S8.  AFTER THAT EACH 6 BYTE (BIT) BLOCK  * 00243
*        OF KEY48 WILL BE REPLACED BY THE 4 BIT CODE FOUND IN THE     * 00244
*        TABLE LOOK UP.  THUS MY 48 BITS BECOME 32 BITS AGAIN.  YIPEE.* 00245
*        THE TABLES S1,S2,...S8 ARE USED REPECTIVELY FOR THE 1ST,2ND, * 00246
*        ...8TH BLOCK OF 6 BITS IN KEY48.                             * 00247
*********************************************************************** 00248
         LA    R4,KEY48       SET UP BXLE CONTROL                       00249
         LA    R6,1                                                     00250
         LA    R7,KEY48+47                                              00251
SHIFTBIT SLDL  RE,1           SHIFT REGS. 14 & 15 LEFT 1 BIT            00252
         TM    0(R4),1        IS RIGHTMOST BIT IN BYTE TURNED ON?       00253
         BNO   NEXTBYTE       NO, SHIFT IN ZERO                         00254
         O     RF,ONE         OR IN A ONE BIT TO SHIFT                  00255
NEXTBYTE BXLE  R4,R6,SHIFTBIT                                           00256
*                                                                       00257
         SLDL  RE,16          SHIFT 48 BITS FLUSH LEFT IN REGS. 14 & 15 00258
         SR    R9,R9          ZERO OUT SCRATCH REGISTER 9               00259
         LA    R4,S1          POINT TO FIRST TABLE FOR 1ST 6 BIT KEY    00260
         LA    R6,64          SIZE IN BYTES OF TABLE TO JUMP OVER       00261
         LA    R7,S7          STOP AFTER LAST ODD NUMBERED TABLE        00262
LOOP     SLL   RA,8           SHIFT OVER BITS CREATED SO FAR            00263
         LR    R5,RE          GET LEFTMOST 6 BITS OF RE IN R5           00264
         SRL   R5,26                                                    00265
         SLDL  RE,6           SHIFT IN NEXT 6 BIT KEY                   00266
         IC    R9,0(R5,R4)    GET BYTE FROM TABLE S1,S3,S5,S7           00267
         AR    R4,R6          POINT TO TABLE S2,S4,S6,S8                00268
         LR    R5,RE          GET LEFTMOST 6 BITS OF RE IN R5           00269
         SRL   R5,26                                                    00270
         SLDL  RE,6           SHIFT IN NEXT 6 BIT KEY                   00271
         IC    RA,0(R5,R4)    GET BYTE FROM TABLE S2,S4,S6,S8           00272
         SLL   R9,4           SHIFT LEFT HALF BYTE TO POSITION          00273
         OR    RA,R9          OR LEFT AND RIGHT HALVES OF BYTE          00274
         BXLE  R4,R6,LOOP     POINT TO S3,S5,S7 AND GO AGAIN            00275
         EJECT                                                          00276
*********************************************************************** 00277
*        REGISTER 10 NOW CONTAINS 32 BITS TO DECODE TO 32 BYTES       * 00278
*********************************************************************** 00279
         LA    R7,RIGHT48+31  ADDR FOR FIRST BYTE STORE                 00280
         LA    R9,RIGHT48-1   ADDR-1 OF LAST BYTE TO STORE. (R8)=-1     00281
STOREBIT STC   RA,0(R7)       STORE BYTE (ONLY RIGHTMOST BIT IMPORTANT) 00282
         SRL   RA,1           SHIFT IN NEXT BIT                         00283
         BXH   R7,R8,STOREBIT                                           00284
**********************************************************************  00285
*        PERFORM PERMUTATION OF RESULTANT 32 BYTES                   *  00286
**********************************************************************  00287
         MVC   PERM0(32),PRIMP    MOVE IN PERMUTE PATTERN               00288
         TR    PERM0(32),RIGHT48  TRANSLATE IN 32 LEFT BYTES OF RGHT    00289
*********************************************************************** 00290
*        EXCLUSIVE OR THE COMPLETED PERMUTED RIGHTHALF WITH THE       * 00291
*        ORIGINAL LEFT HALF, AND THEN PLACE ORIGINAL RIGHT HALF IN    * 00292
*        LEFT HALF, AND MOVE IN EXCLUSIVE OR RESULT TO RIGHT HALF.    * 00293
*********************************************************************** 00294
         XC    PERM0(32),PERM1                                          00295
         MVC   PERM1(32),PERM1+32  MOVE ORIG. RIGHT TO LEFT HALF        00296
         MVC   PERM1+32(32),PERM0 MOVE IN EXCL OR RESULT                00297
         L     RE,MODE        INCR ITER# IF ENCIPH, DECR IF DECIPH      00298
         B     ENDTAB(RE)                                               00299
ENDTAB   B     ENDENCIP                                                 00300
         BCTR  RD,0           DECREMENT BECAUSE WE ARE DECIPHERING      00301
         LTR   RD,RD                                                    00302
         BNM   NEXTITER       GO UNTIL ITER # IS NEGATIVE               00303
         B     UNSWITCH       JUMP OUT WHEN DONE                        00304
ENDENCIP LA    RD,1(RD)       INCREMENT BECAUSE WE ARE ENCIPHERING      00305
         C     RD,=F'15'                                                00306
         BNH   NEXTITER                                                 00307
*********************************************************************** 00308
*        FALL THRU TO HERE WHEN 16 ITERATIONS DONE.  NOW DO FINAL     * 00309
*        PERMUTATION WHICH IS INVERSE OF FIRST PERMUTATION AND        * 00310
*        STORE RESULTING 8 BYTES BACK WHERE I GOT THE ORIGINALS FROM. * 00311
*********************************************************************** 00312
UNSWITCH MVC   PERM1+32(32),PERM1  LEAVE HALVES UNSWITCHED ON 16TH      00313
         MVC   PERM1(32),PERM0                                          00314
         MVC   PERM0,LASTTRAN  MOVE IN INVERSE PATTERN                  00315
         TR    PERM0,PERM1     PERMUTE PERM1 INTO PERM0 RESULT          00316
*********************************************************************** 00317
*        CHANGE BYTES BACK TO BITS FOR THE FINAL TIME                *  00318
*********************************************************************** 00319
         LA    R4,PERM0                                                 00320
         LA    R6,1                                                     00321
         LA    R7,PERM0+63                                              00322
STUFFIT  SLDL  RE,1            SHIFT BITS LEFT ONE                      00323
         TM    0(R4),1         IS RIGHTMOST BIT OF BYTE A ONE?          00324
         BNO   BYTENEXT        NO, SHIFT IN ZERO BIT                    00325
         O     RF,ONE          OR IN A ONE BIT                          00326
BYTENEXT BXLE  R4,R6,STUFFIT                                            00327
*                                                                       00328
         STCM  RE,15,0(R1)     STORE OVER ORIG FIRST 4 BYTES            00329
         STCM  RF,15,4(R1)     STORE OVER ORIG SECOND 4 BYTES           00330
         BXLE  R1,R2,NEXT8BYT  GO GET NEXT 8 BYTES UNTIL DONE           00331
         EJECT                                                          00332
*********************************************************************** 00333
*        COMMON EXIT FOR SETKEY, ENCIPH, AND DECIPH.                  * 00334
*********************************************************************** 00335
EXUENT   L     RD,SAVEAREA+4   LOAD ADDR OF CALLERS SAVE AREA           00336
         SR    RF,RF           SET RETURN CODE TO ZERO                  00337
         RETURN (14,12),RC=(15)                                         00338
*********************************************************************** 00339
*        DATA AREAS                                                   * 00340
*********************************************************************** 00341
SAVEAREA DS    18F             MY REGISTER SAVE AREA                    00342
MINUS1   DC    F'-1'                                                    00343
ONE      DC    F'1'                                                     00344
MODE     DS    F'0'                                                     00345
STRIP    DC    X'FFFFFFF8'                                              00346
KEY0     DS    16CL48                                                   00347
PERM0    DS    CL64                                                     00348
PERM1    DS    CL64                                                     00349
KEY64    DS    CL64                                                     00350
RIGHT48  DS    CL48                                                     00351
KEY48    DS    CL48                                                     00352
****************** BYTEOUT THRU BYTE56 MUST BE TOGETHER ****            00353
BYTEOUT  DS    CL1                                                      00354
KEY56    DS    0CL56                                                    00355
         DS    CL27                                                     00356
BYTE28   DS    CL1                                                      00357
         DS    CL27                                                     00358
BYTE56   DS    CL1                                                      00359
****************** END OF GROUP                         ****            00360
*********************************************************************** 00361
*        TRANSLATION  TABLES                                          * 00362
*********************************************************************** 00363
PERM1PAT DS    0CL64                                                    00364
         DC    AL1(57,49,41,33,25,17,09,01,59,51,43,35,27,19,11,03)     00365
         DC    AL1(61,53,45,37,29,21,13,05,63,55,47,39,31,23,15,07)     00366
         DC    AL1(56,48,40,32,24,16,08,00,58,50,42,34,26,18,10,02)     00367
         DC    AL1(60,52,44,36,28,20,12,04,62,54,46,38,30,22,14,06)     00368
RIGHT48P DS    0CL48                                                    00369
         DC    AL1(31,00,01,02,03,04,03,04,05,06,07,08)                 00370
         DC    AL1(07,08,09,10,11,12,11,12,13,14,15,16)                 00371
         DC    AL1(15,16,17,18,19,20,19,20,21,22,23,24)                 00372
         DC    AL1(23,24,25,26,27,28,27,28,29,30,31,00)                 00373
CHOICE1P DS    0CL56                                                    00374
         DC    AL1(56,48,40,32,24,16,08,00,57,49,41,33,25,17)           00375
         DC    AL1(09,01,58,50,42,34,26,18,10,02,59,51,43,35)           00376
         DC    AL1(62,54,46,38,30,22,14,06,61,53,45,37,29,21)           00377
         DC    AL1(13,05,60,52,44,36,28,20,12,04,27,19,11,03)           00378
CHOICE2P DS    0CL48                                                    00379
         DC    AL1(13,16,10,23,00,04,02,27,14,05,20,09)                 00380
         DC    AL1(22,18,11,03,25,07,15,06,26,19,12,01)                 00381
         DC    AL1(40,51,30,36,46,54,29,39,50,44,32,47)                 00382
         DC    AL1(43,48,38,55,33,52,45,41,49,35,28,31)                 00383
TICKLE   DS    0CL48                                                    00384
         DC    AL1(00,05,01,02,03,04,06,11,07,08,09,10)                 00385
         DC    AL1(12,17,13,14,15,16,18,23,19,20,21,22)                 00386
         DC    AL1(24,29,25,26,27,28,30,35,31,32,33,34)                 00387
         DC    AL1(36,41,37,38,39,40,42,47,43,44,45,46)                 00388
LASTTRAN DS    0CL64                                                    00389
         DC    AL1(39,07,47,15,55,23,63,31,38,06,46,14,54,22,62,30)     00390
         DC    AL1(37,05,45,13,53,21,61,29,36,04,44,12,52,20,60,28)     00391
         DC    AL1(35,03,43,11,51,19,59,27,34,02,42,10,50,18,58,26)     00392
         DC    AL1(33,01,41,09,49,17,57,25,32,00,40,08,48,16,56,24)     00393
PRIMP    DS    0CL32                                                    00394
         DC    AL1(15,06,19,20,28,11,27,16,00,14,22,25,04,17,30,09)     00395
         DC    AL1(01,07,23,13,31,26,02,08,18,12,29,05,21,10,03,24)     00396
S1       DS    0CL64                                                    00397
         DC    AL1(14,04,13,01,02,15,11,08,03,10,06,12,05,09,00,07)     00398
         DC    AL1(00,15,07,04,14,02,13,01,10,06,12,11,09,05,03,08)     00399
         DC    AL1(04,01,14,08,13,06,02,11,15,12,09,07,03,10,05,00)     00400
         DC    AL1(15,12,08,02,04,09,01,07,05,11,03,14,10,00,06,13)     00401
S2       DS    0CL64                                                    00402
         DC    AL1(15,01,08,14,06,11,03,04,09,07,02,13,12,00,05,10)     00403
         DC    AL1(03,13,04,07,15,02,08,14,12,00,01,10,06,09,11,05)     00404
         DC    AL1(00,14,07,11,10,04,13,01,05,08,12,06,09,03,02,15)     00405
         DC    AL1(13,08,10,01,03,15,04,02,11,06,07,12,00,05,14,09)     00406
S3       DS    0CL64                                                    00407
         DC    AL1(10,00,09,14,06,03,15,05,01,13,12,07,11,04,02,08)     00408
         DC    AL1(13,07,00,09,03,04,06,10,02,08,05,14,12,11,15,01)     00409
         DC    AL1(13,06,04,09,08,15,03,00,11,01,02,12,05,10,14,07)     00410
         DC    AL1(01,10,13,00,06,09,08,07,04,15,14,03,11,05,02,12)     00411
S4       DS    0CL64                                                    00412
         DC    AL1(07,13,14,03,00,06,09,10,01,02,08,05,11,12,04,15)     00413
         DC    AL1(13,08,11,05,06,15,00,03,04,07,02,12,01,10,14,09)     00414
         DC    AL1(10,06,09,00,12,11,07,13,15,01,03,14,05,02,08,04)     00415
         DC    AL1(03,15,00,06,10,01,13,08,09,04,05,11,12,07,02,14)     00416
S5       DS    0CL64                                                    00417
         DC    AL1(02,12,04,01,07,10,11,06,08,05,03,15,13,00,14,09)     00418
         DC    AL1(14,11,02,12,04,07,13,01,05,00,15,10,03,09,08,06)     00419
         DC    AL1(04,02,01,11,10,13,07,08,15,09,12,05,06,03,00,14)     00420
         DC    AL1(11,08,12,07,01,14,02,13,06,15,00,09,10,04,05,03)     00421
S6       DS    0CL64                                                    00422
         DC    AL1(12,01,10,15,09,02,06,08,00,13,03,04,14,07,05,11)     00423
         DC    AL1(10,15,04,02,07,12,09,05,06,01,13,14,00,11,03,08)     00424
         DC    AL1(09,14,15,05,02,08,12,03,07,00,04,10,01,13,11,06)     00425
         DC    AL1(04,03,02,12,09,05,15,10,11,14,01,07,06,00,08,13)     00426
S7       DS    0CL64                                                    00427
         DC    AL1(04,11,02,14,15,00,08,13,03,12,09,07,05,10,06,01)     00428
         DC    AL1(13,00,11,07,04,09,01,10,14,03,05,12,02,15,08,06)     00429
         DC    AL1(01,04,11,13,12,03,07,14,10,15,06,08,00,05,09,02)     00430
         DC    AL1(06,11,13,08,01,04,10,07,09,05,00,15,14,02,03,12)     00431
S8       DS    0CL64                                                    00432
         DC    AL1(13,02,08,04,06,15,11,01,10,09,03,14,05,00,12,07)     00433
         DC    AL1(01,15,13,08,10,03,07,04,12,05,06,11,00,14,09,02)     00434
         DC    AL1(07,11,04,01,09,12,14,02,00,06,10,13,15,03,05,08)     00435
         DC    AL1(02,01,14,07,04,10,08,13,15,12,09,00,03,05,06,11)     00436
         END                                                            00437
