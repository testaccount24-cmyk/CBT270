*          DATA SET CBT930     AT LEVEL 001 AS OF 02/25/79
* MLPALIST               VERSION 1.1 WDPSC AUTHOR STEVE ERICKSON        00001
*          LISTS THE MODULES IN MEMORY THAT WERE LOADED BY THE          00002
*  MODIFY LINK PACK AREA PARAMETER MEMBER AND THE FIXED LINK PACK       00003
*  PACK AREA MEMBER, ALSO ANY MODULES THAT HAVE THE MODIFY/FIX BIT      00004
*  OF THE CDE TURNED ARE LISTED.                                        00005
*                                                                       00006
* THE LIST FORMAT IS SIMILAR TO THAT OF LISTLPA COMMAND OF AMBLIST.     00007
         SPACE 6                                                        00008
*                                                                       00009
*        DISTRIBUTION LIBRARY   SYS1.AMODGEN IS NEEDED TO ASSEMBLE THIS 00010
*        ROUTINE.                                                       00011
*                                                                       00012
*        OTHER MACROS USED ARE                                          00013
*               REGISTER - EQUATE MACRO FOR GENERAL REGISTERS           00014
*               QKSRT1   - INTERNAL SORT ROUTINE, CSECT CREATED         00015
*                                                                       00016
*        PRINT OFF                                                      00017
         MACRO                                                          00018
         REGISTER                                                       00019
         LCLA  &I                                                       00020
.LOOP    ANOP                                                           00021
R&I      EQU   &I                                                       00022
&I       SETA  &I+1                                                     00023
         AIF   (&I LT 16).LOOP                                          00024
         MEND                                                           00025
         MACRO                                                          00026
         QKSRT1 &NAME,&TYPE,&LENGTH=0,&STRTKY=1,&KYLGTH=0,&ORDER=A,    X00027
               &EXTRA=0,&OVRTYP=NONE,&DISP=1,&INLINE=NO                 00028
*********************************************************************** 00029
*** QUICKERSORT MACRO-SUBROUTINE: BASED ON CACM ALGORITHM NUMBER 271  * 00030
*** THE FOLLOWING CHANGES AND ADDITIONS WERE MADE:                    * 00031
*** 1.  CALCULATION OF P AS P:=(I+J)/2 WAS CHANGED TO: P:=I+(J-I)/2   * 00032
*** 2.  THE LINE 'FOR Q:=Q STEP -1 UNTIL K DO' WAS CHANGED TO:        * 00033
***        'FOR Q:=Q STEP -1 UNTIL K+1 DO'                            * 00034
*** 3.  OPTION: CORRESPONDING ELEMENTS IN UP TO FIVE EXTRA ARRAYS MAY * 00035
***        BE EXCHANGED, WHEN ELEMENTS IN THE SORTED ARRAY ARE        * 00036
***        EXCHANGED.  EACH EXTRA ARRAY MUST CONTAIN THE SAME NUMBER  * 00037
***        OF ELEMENTS, AND HAVE ELEMENT SIZES EQUAL TO THOSE OF THE  * 00038
***        SORTED ARRAY.                                              * 00039
*** 4.  OPTION: WITH 'TYPE' SET TO 'C' (CHARACTER FORMAT) OTHER TYPES * 00040
***        OF COMPARES MAY BE MADE BY SPECIFYING ONE OR TWO           * 00041
***        OVERRIDING PARAMETERS.                                     * 00042
*** 5.  OPTION: IN LINE CODE MAY BE GENERATED, IF DESIRED, BY         * 00043
***        SPECIFYING INLINE=YES.  A DUMMY PROGRAM NAME IS STILL      * 00044
***        REQUIRED.  REGISTERS WILL BE SAVED IN A SPECIAL SAVEAREA.  * 00045
*********************************************************************** 00046
.********************************************************************** 00047
.*           EXPLANATION OF KEYWORD AND POSITONAL OPERANDS:           * 00048
.*                                                                    * 00049
.* 1. NAME (POSITIONAL): THE SUBROUTINE MUST BE NAMED ARBITRARILY     * 00050
.*    (ONE TO SIX CHARACTERS MAXIMUM) BY THE USER. FORTRAN OR COBOL   * 00051
.*    RULES MUST BE FOLLOWED IN CHOOSING A NAME.                      * 00052
.* 2. TYPE (POSITIONAL): THE TYPE OF VARIABLES TO BE SORTED MUST BE   * 00053
.*    CONVEYED TO THE MACRO.  ADMISSIBLE VALUES ARE: P=PACKED;        * 00054
.*    C=CHARACTER OR ALPHANUMERICS (= A-FORMAT VARIABLES); H=HALFWORD * 00055
.*    INTEGERS (=INTEGER*2); F=FULLWORD (=INTEGER*4); E=SINGLE        * 00056
.*    PRECISION FLOATING POINT (=REAL*4); D=DOUBLE PRECISION FLOATING * 00057
.*    POINT (=REAL*8).                                                * 00058
.* 3. LENGTH (KEYWORD): THE LENGTH IN BYTES OF THE FIELDS OF TYPES P  * 00059
.*    AND C MUST BE SPECIFIED.  THE LENGTH MUST BE LESS THAN 256      * 00060
.*    BYTES FOR C OR 16 BYTES FOR P.                                  * 00061
.* 4. STRTKY (KEYWORD): THE COLUMN THE SORTING KEY BEGINS AT MAY BE   * 00062
.*    CHANGED FROM ITS NULL VALUE OF COLUMN 1.                        * 00063
.* 5. KYLGTH (KEYWORD): THE LENGTH OF THE DESIRED SORTING KEY.  IF    * 00064
.*    KYLGTH IS OMITTED, LENGTH MINUS STRTKY IS THE DEFAULT OPTION.   * 00065
.* 6. ORDER (KEYWORD): THE ORDER OF THE DESIRED SORT. OPTIONS ARE:    * 00066
.*    A=ASCENDING ORDER; D=DESCENDING ORDER. IF ORDER IS NOT          * 00067
.*    SPECIFIED, ASCENDING ORDER IS THE ASSUMED DEFAULT OPTION.       * 00068
.* 7. EXTRA (KEYWORD): THE NUMBER OF ADDITIONAL ARRAYS (RANGE: 0 - 5) * 00069
.*    EXTRA=0 IS THE DEFAULT OPTION.                                  * 00070
.* 8. OVRTYP (KEYWORD): OVRTYP=(D,E,F, OR H) ALLOWS FIXED OR FLOATING * 00071
.*    POINT COMPARES WITHIN LONGER FIELDS.  TYPE MUST EQUAL "C".      * 00072
.* 9. DISP (KEYWORD): WHEN OVRTYP IS SPECIFIED, THIS SPECIFIES THE    * 00073
.*    COLLUMN AT WHICH COMPARISON BEGINS.  DEFAULT IS COLLUMN 1.      * 00074
.*10. INLINE (KEYWORD): INLINE=YES GENERATES IN LINE CODE WITHIN AN   * 00075
.*    ASSEMBLER ROUTINE.  DEFAULT IS A CSECT CALLABLE BY FORTRAN.     * 00076
.********************************************************************** 00077
.*   THE FOLLOWING PARAMETER LIST IS REQUIRED IN THE FORTRAN CALL:    * 00078
.*                                                                    * 00079
.* 1. THE NAME OF THE ARRAY TO BE SORTED.                             * 00080
.* 2. THE NUMBER OF ELEMENTS OF THE ARRAY TO BE SORTED.               * 00081
.* 3. THE NAMES OF "EXTRA" ARRAYS, IF ANY.                            * 00082
.********************************************************************** 00083
.*  SEVERAL EXAMPLES WILL MAKE THE USE OF A MACRO SUBROUTINE CLEAR:   * 00084
.*                                                                    * 00085
.* PROBLEM 1: SORT THE CHARACTER ARRAY CALLED A OF 500 ELEMENTS OF 80 * 00086
.* BYTES EACH ACCORDING TO AN 8 BYTE KEY STARTING IN COLUMN 20.       * 00087
.* SOLUTION:  THE FOLLOWING CARDS ARE NEEDED:                         * 00088
.* // JOB CARD                                                        * 00089
.* // EXEC ASMGC                                                      * 00090
.* //ASM.SYSIN DD *                                                   * 00091
.* (QUICKERSORT MACRO DEFINITION SOURCE CODE IF NOT IN SYSTEM LIBRARY)* 00092
.*          QKRSRT SORT1,C,LENGTH=80,STRTKY=20,KYLGTH=8               * 00093
.*          END                                                       * 00094
.* (COMMENT: THE NAME SORT1 WAS ARBITRARILY CHOSEN. ONLY THE QKRSRT   * 00095
.* AND END CARD NEED APPEAR IF THE MACRO IS IN THE SYSTEM LIBRARY)    * 00096
.* /*                                                                 * 00097
.* // EXEC FORTGCLG                                                   * 00098
.* //FORT.SYSIN DD *                                                  * 00099
.* (FORTRAN DECK WHICH WILL CONTAIN THE FOLLOWING STATEMENT)          * 00100
.*     .                                                              * 00101
.*     .                                                              * 00102
.*     .                                                              * 00103
.*       CALL SORT1(A,500)                                            * 00104
.*     .                                                              * 00105
.*     .                                                              * 00106
.*     .                                                              * 00107
.* /*                                                                 * 00108
.* //GO.SYSIN DD *                                                    * 00109
.* (DATA, IF ANY)                                                     * 00110
.* /*                                                                 * 00111
.*                                                                    * 00112
.* PROBLEM 2: SUPPOSE AN ARRAY OF DOUBLE PRECISION FLOATING POINT     * 00113
.* NUMBERS IS TO BE SORTED.  SUPPOSE THE NAME DBLSRT IS CHOSEN FOR    * 00114
.* THE SUBROUTINE.  THE MACRO PROTOTYPE CARD WOULD THEN READ:         * 00115
.*          QKRSRT DBLSRT,D                                           * 00116
.* HERE THE LENGTH IS IMPLIED TO BE 8 BYTES.  IN THE FORTRAN PROGRAM  * 00117
.* THE STATEMENT "CALL DBLSRT(.....)" WOULD APPEAR.                   * 00118
.*                                                                    * 00119
.* PROBLEM 3: SUPPOSE AN ARRAY OF FIXED POINT NUMBERS IS TO BE SORTED.* 00120
.* ALSO TO BE SORTED ELEMENT FOR ELEMENT WITH THE FIRST ARRAY ARE     * 00121
.* THREE ADDITIONAL ARRAYS.  THE MACRO PROTOTYPE WOULD THEN READ:     * 00122
.*          QKRSRT EXSRT,F,EXTRA=3                                    * 00123
.* HERE THE LENGTH IS IMPLIED TO BE 4 BYTES.  IN THE FORTRAN PROGRAM  * 00124
.* THE STATEMENT "CALL EXSRT(.., .., .., .., ..)" WOULD APPEAR.       * 00125
.*                                                                    * 00126
.* PROBLEM 4: SUPPOSE A REAL*4 ARRAY WITH DIMENSION ARR(3,100) IS TO  * 00127
.* BE SORTED ON THE SECOND COLLUMN.  THE MACRO PROTOTYPE STATEMENT    * 00128
.* WOULD THEN READ:                                                   * 00129
.*          QKRSRT OVRSRT,C,LENGTH=12,OVRTYP=E,DISP=5                 * 00130
.* HERE SORTING WOULD BE DONE ACCORDING TO THE SECOND COLLUMN.  IN THE* 00131
.* FORTRAN PROGRAM THE STATEMENT "CALL OVRSRT(ARR,100)" WOULD APPEAR. * 00132
.*                                                                    * 00133
.* PROBLEM 5: SUPPOSE AN IN LINE SORT IS DESIRED IN AN ASSEMBLER      * 00134
.* ROUTINE, WITH FIXED POINT COMPARES.  THE MACRO PROTOTYPE WOULD     * 00135
.* THEN READ:                                                         * 00136
.*          QKRSRT XYZ,F,INLINE=YES                                   * 00137
.* HERE THE DUMMY NAME "XYZ" IS NOT GENERATED.  ENTERING THE SORT     * 00138
.* ROUTINE, REGISTER 1 MUST CONTAIN THE ADDRESS OF A PARAMETER LIST   * 00139
.* WITH THE ADDRESSES OF: THE ARRAY TO BE SORTED, THE ARRAY LENGTH    * 00140
.* VARIABLE, AND EXTRA ARRAY ADDRESSES IF ANY.  THE CONTAINING CSECT  * 00141
.* MUST USE R(15) FOR A BASE REGISTER.                                * 00142
.*                                                                    * 00143
.* EFFECTIVELY THE USER PROVIDES A ONE INSTRUCTION ASSEMBLY LANGUAGE  * 00144
.* PROGRAM.  THE USER IS NOW ABLE TO SORT ANYTHING ANY WAY.           * 00145
.********************************************************************** 00146
         LCLA  &STRTKX,&LT2,&SLNGTX,&ZZ,&WW,&XX,&YY,&KYLGTX,&DISPL      00147
         LCLC  &LENGTX,&TYPX,&BRNCH1,&BRNCH2,&QCHK,&REG,&Q              00148
&KYLGTX  SETA  &KYLGTH *               VARIABLE PARAMETERS ARE          00149
&TYPX    SETC  '&TYPE' *               CHANGED TO VARIABLE SYMBOLS      00150
&LENGTX  SETC  '&LENGTH' *             SO THEIR VALUES MAY BE RESET     00151
&STRTKX  SETA  &STRTKY-1                                                00152
&DISPL   SETA  0                                                        00153
         AIF   ('&OVRTYP' EQ 'NONE').REJ                                00154
&DISPL   SETA  &DISP-1                                                  00155
.REJ     AIF   (&EXTRA LE 5).L500                                       00156
         MNOTE 16,'MORE THAN 5 EXTRA ARRAYS'                            00157
         MEXIT                                                          00158
.L500    ANOP                                                           00159
&QCHK    SETC  'G' *                   INDICATES TYPE IS NOT C OR P     00160
&REG     SETC  '7' *                   WORK REG IF TYPE IS NOT C OR P   00161
         AIF   ('&ORDER' EQ 'A').L31 * WHICH ORDER IS DESIRED FOR SORT? 00162
&BRNCH1  SETC  'H' *                   DESCENDING ORDER                 00163
&BRNCH2  SETC  'L'                                                      00164
         AGO   .L32                                                     00165
.L31     ANOP *                        ASCENDING ORDER                  00166
&BRNCH1  SETC  'L'                                                      00167
&BRNCH2  SETC  'H'                                                      00168
.L32     AIF   (1 LE K'&NAME AND K'&NAME LE 6).L2 * IS NAME OKAY?       00169
         MNOTE 16,'IMPROPER LENGTH FOR SUBROUTINE NAME' * INVALID NAME  00170
         MEXIT *                       STOP EXPANSION                   00171
.L2      AIF   ('&TYPE' NE 'F' AND '&TYPE' NE 'E').L3 * TYPE F OR E?    00172
&LENGTX  SETC  '4' *                   IF SO, SET LENGTH TO 4 BYTES     00173
         AIF   ('&TYPE' NE 'F').L4                                      00174
&TYPX    SETC  ' ' *                   IF TYPE F, SET &TYPX TO BLANK    00175
         AGO   .L4                                                      00176
.L3      AIF   ('&TYPE' NE 'H').L5 *   TYPE H (HALFWORD)?               00177
&LENGTX  SETC  '2' *                   IF SO, SET LENGTH TO 2 BYTES     00178
         AGO   .L4                                                      00179
.L5      AIF   ('&TYPE' NE 'D').L6 *   TYPE D (DOUBLEWORD)?             00180
&LENGTX  SETC  '8' *                   IF SO, SET LENGTH TO 8 BYTES     00181
         AGO   .L4                                                      00182
.L6      AIF   ('&TYPE' EQ 'C' OR '&TYPE' EQ 'P').L7 * TYPE C OR P?     00183
         MNOTE 16,'INVALID TYPE' *     IF ABOVE TYPES NOT SPECIFIED     00184
         MEXIT *                       STOP EXPANSION                   00185
.L7      ANOP                                                           00186
&QCHK    SETC  'B' *                   INDICATES TYPE IS C OR P         00187
&REG     SETC  '6' *                   WORK REG IF TYPE IS C OR P       00188
         AIF   ('&LENGTH' NE '0').L1 * LENGTH BLANK FOR TYPE C OR P?    00189
         MNOTE 16,'LENGTH WAS NOT SPECIFIED FOR TYPE P OR C'            00190
         MEXIT *                       IF SO, STOP EXPANSION            00191
.L1      AIF   ('&OVRTYP' EQ 'NONE').M2                                 00192
&Q       SETC  'B'                                                      00193
         AIF   ('&OVRTYP' NE 'F' AND '&OVRTYP' NE 'E').M5               00194
&YY      SETA  4                                                        00195
         AGO   .M8                                                      00196
.M5      AIF   ('&OVRTYP' NE 'H').M6                                    00197
&YY      SETA  2                                                        00198
         AGO   .M8                                                      00199
.M6      AIF   ('&OVRTYP' NE 'D').M1                                    00200
&YY      SETA  8                                                        00201
.M8      ANOP                                                           00202
&Q       SETC  'G'                                                      00203
         AIF   (&DISP+&YY-1 LE &LENGTX).L4                              00204
         MNOTE 16,'DISP PLUS OVRTYP LENGTH GREATER THAN LENGTH'         00205
         MEXIT                                                          00206
.M1      MNOTE 16,'INVALID OVRTYP'                                      00207
         MEXIT                                                          00208
.M2      AIF   (&STRTKX LE &LENGTH).M3                                  00209
         MNOTE 16,'STRTKY GREATER THAN LENGTH'                          00210
         MEXIT                                                          00211
.M3      AIF   (&KYLGTX GT 0).M4                                        00212
&KYLGTX  SETA  &LENGTH-&STRTKX                                          00213
.M4      AIF   (&KYLGTX+&STRTKX LE &LENGTX).L4                          00214
         MNOTE 16,'KYLGTH PLUS STRTKY GREATER THAN LENGTH'              00215
         MEXIT                                                          00216
.L4      ANOP                                                           00217
&LT2     SETA  &LENGTX*2 *             LENGTH * 2                       00218
&SLNGTX  SETA  &LENGTX/2-&LENGTX/8 *   SHIFT POSITIONS = LOG2(LENGTH)   00219
         AIF   ('&QCHK' EQ 'G').L555                                    00220
         AIF   ('&TYPE' EQ 'C').L551                                    00221
         AIF   (&LENGTX LE 16).L555                                     00222
         MNOTE 16,'LENGTH GREATER THAN 16 BYTES FOR DECIMAL'            00223
         MEXIT                                                          00224
.L551    AIF   (&LENGTX LE 256).L555                                    00225
         MNOTE 16,'LENGTH GREATER THAN 256 BYTES FOR CHARACTER'         00226
         MEXIT                                                          00227
.L555    ANOP                                                           00228
*                                      BEGIN QUICKERSORTING             00229
         AIF   ('&INLINE' EQ 'NO').L543                                 00230
         STM   14,12,S&SYSNDX                                           00231
         AGO   .L531                                                    00232
.L543    ANOP                                                           00233
&NAME    CSECT                                                          00234
         STM   14,12,12(13) *          SAVE REGISTERS                   00235
         USING &NAME,15 *              SET UP BASE REGISTER             00236
.L531    ST    13,R13&SYSNDX *            STORE POINTER TO SAVEAREA     00237
*                                      (AD(W) MEANS THE ADDRESS OF W)   00238
*                                      THE CONTENTS OF THE REGISTERS    00239
*                                      FOR QUICKERSORT ARE AS FOLLOWS:  00240
*                                       1 - LENGTH                      00241
*                                       2 - TMP (TEMP. COMPARE STORAGE) 00242
*                                       4 - T (TEMPORARY COMPARE ITEM)  00243
*                                       5 - M (INDEX FOR LT AND UT)     00244
*                                       8 - Q LOOP DECREMENT = LENGTH   00245
*                                       9 - Q LOOP COMPARAND = AD(A(K)) 00246
*                                      10 - K LOOP INCREMENT = LENGTH   00247
*                                      11 - K LOOP COMPARAND = AD(A(Q)) 00248
*                                      12 - AD(A(I))                    00249
*                                      13 - AD(A(J))                    00250
*                                      14 - =F'4' (CONSTANT)            00251
*                                      15 - BASE REGISTER               00252
*                                      0,3,6,7 - WORK REGISTERS         00253
&XX      SETA  3+&EXTRA                                                 00254
         LM    2,&XX,0(1)                                               00255
         L     3,0(3)                                                   00256
         AIF   (&EXTRA EQ 0).L88                                        00257
         LR    9,2                                                      00258
         AIF   (&EXTRA GT 1).L94                                        00259
         LR    10,4                                                     00260
         AGO   .L95                                                     00261
.L94     ANOP                                                           00262
&YY      SETA  9+&EXTRA                                                 00263
         LM    10,&YY,8(1)                                              00264
.L95     ANOP                                                           00265
&ZZ      SETA  9                                                        00266
&WW      SETA  4                                                        00267
&YY      SETA  &EXTRA                                                   00268
.L90     SR    &ZZ,&WW                                                  00269
&YY      SETA  &YY-1                                                    00270
&ZZ      SETA  &ZZ+1                                                    00271
&WW      SETA  &WW+1                                                    00272
         AIF   (&YY GT 0).L90                                           00273
         SR    &ZZ,2                                                    00274
         STM   9,&ZZ,DA&SYSNDX                                          00275
.L88     LA    1,&LENGTX                                                00276
         SR    2,1                                                      00277
         SR    5,5 *                   M:=1;                            00278
         LA    14,4                                                     00279
         LR    10,1                                                     00280
         LCR   8,1                                                      00281
         LR    13,3                                                     00282
         MR    12,1                                                     00283
         LR    12,1 *                  I:=1;                            00284
         AR    12,2                                                     00285
         AR    13,2                                                     00286
         AIF   ('&QCHK' EQ 'G').L1000                                   00287
         LA    2,TMP&SYSNDX                                             00288
.L1000   ANOP                                                           00289
N&SYSNDX LR    &REG,13 *               N: IF J-I > 1 THEN               00290
         SR    &REG,12                                                  00291
         SR    &REG,1                                                   00292
         BNP   L3E&SYSNDX                                               00293
*                                      BEGIN COMMENT;                   00294
         AR    &REG,1 *                   P:=I+(J-I)/2;                 00295
         AIF   ('&QCHK' EQ 'G').L41                                     00296
         SRDA  6,33                                                     00297
         DR    6,1                                                      00298
         MR    6,1                                                      00299
         AGO   .L42                                                     00300
.L41     SRA   7,&SLNGTX+1                                              00301
         SLA   7,&SLNGTX                                                00302
.L42     AR    7,12                                                     00303
         AIF   ('&QCHK' EQ 'G').L43                                     00304
         MVC   0(&LENGTX,2),0(7) *          T := A(P);                  00305
         MVC   0(&LENGTX,7),0(12) *          A(P) := A(I);              00306
         AIF   (&EXTRA EQ 0).L4444                                      00307
&XX      SETA  0                                                        00308
&YY      SETA  0                                                        00309
&ZZ      SETA  &LENGTX                                                  00310
.L1002   S     7,DA&SYSNDX+&YY                                          00311
         S     12,DA&SYSNDX+&YY                                         00312
         AIF   (&XX EQ &EXTRA).L44                                      00313
         MVC   &ZZ.(&LENGTX,2),0(7)                                     00314
         MVC   0(&LENGTX,7),0(12)                                       00315
&XX      SETA  &XX+1                                                    00316
&YY      SETA  &YY+4                                                    00317
&ZZ      SETA  &ZZ+&LENGTX                                              00318
         AGO   .L1002                                                   00319
.L43     L&TYPX    4,0(7) *                T:=A(P);                     00320
         L&TYPX    6,0(12)                                              00321
         ST&TYPX    6,0(7) *                A(P):=A(I);                 00322
         AIF   (&EXTRA EQ 0).L44                                        00323
&XX      SETA  0                                                        00324
&YY      SETA  0                                                        00325
&ZZ      SETA  &LENGTX                                                  00326
.L1001   S     7,DA&SYSNDX+&YY                                          00327
         S     12,DA&SYSNDX+&YY                                         00328
         AIF   (&XX EQ &EXTRA).L44                                      00329
         L&TYPX 0,0(7)                                                  00330
         L&TYPX 6,0(12)                                                 00331
         ST&TYPX 6,0(7)                                                 00332
         ST&TYPX 0,TMP&SYSNDX+&ZZ                                       00333
&XX      SETA  &XX+1                                                    00334
&YY      SETA  &YY+4                                                    00335
&ZZ      SETA  &ZZ+&LENGTX                                              00336
         AGO   .L1001                                                   00337
.L4444   AIF   ('&OVRTYP' EQ 'NONE' OR '&TYPE' NE 'C').L44              00338
&TYPX    SETC  '&OVRTYP'                                                00339
         AIF   ('&TYPX' NE 'F').NOREJ                                   00340
&TYPX    SETC  ' '                                                      00341
.NOREJ   L&TYPX 4,&DISPL.(2)                                            00342
.L44     LR    11,13 *                  Q := J;                         00343
         LR    9,12                                                     00344
         AR    9,1                                                      00345
         AIF   ('&OVRTYP' EQ 'NONE' OR '&TYPE' NE 'C').NN               00346
&QCHK    SETC  '&Q'                                                     00347
&TYPX    SETC  '&OVRTYP'                                                00348
         AIF   ('&TYPX' NE 'F').NN                                      00349
&TYPX    SETC  ' '                                                      00350
.NN      AIF   ('&QCHK' EQ 'B').L11                                     00351
LP1&SYSNDX C&TYPX    4,&DISPL.(9) *          FOR K:=I+1STEP1 UNTIL Q DO 00352
*                                      BEGIN COMMENT;                   00353
         BN&BRNCH1   ND1&SYSNDX *               IF A(K) > T THEN        00354
*                                      BEGIN COMMENT;                   00355
LP2&SYSNDX C&TYPX  4,&DISPL.(11) *         FOR Q:=Q STEP-1 UNTIL K+1 DO 00356
*                                      BEGIN COMMENT;                   00357
         AGO   .L12                                                     00358
.L11     AIF   ('&TYPX' NE 'P').L13                                     00359
*                                      FOR K := I+1 STEP 1 UNTIL Q DO   00360
*                                      BEGIN COMMENT;                   00361
*                                     IF A(K) > T THEN                  00362
LP1&SYSNDX CP    &STRTKX.(&KYLGTX,2),&STRTKX.(&KYLGTX,9)                00363
         BN&BRNCH1   ND1&SYSNDX                                         00364
*                                      BEGIN COMMENT;                   00365
*                                     FOR Q := Q STEP -1 UNTIL K+1 DO   00366
*                                      BEGIN COMMENT;                   00367
LP2&SYSNDX CP    &STRTKX.(&KYLGTX,2),&STRTKX.(&KYLGTX,11)               00368
         AGO   .L12                                                     00369
.L13     ANOP                                                           00370
*                                      FOR K := I+1 STEP 1 UNTIL Q DO   00371
*                                      BEGIN COMMENT;                   00372
*                                     IF A(K) > T THEN                  00373
LP1&SYSNDX CLC   &STRTKX.(&KYLGTX,2),&STRTKX.(9)                        00374
         BN&BRNCH1   ND1&SYSNDX                                         00375
*                                      BEGIN COMMENT;                   00376
*                                     FOR Q := Q STEP -1 UNTIL K+1 DO   00377
*                                      BEGIN COMMENT;                   00378
LP2&SYSNDX CLC   &STRTKX.(&KYLGTX,2),&STRTKX.(11)                       00379
.L12     AIF   ('&OVRTYP' EQ 'NONE' OR '&TYPE' NE 'C').K1               00380
&QCHK    SETC  'B'                                                      00381
&TYPX    SETC  'C'                                                      00382
.K1      BN&BRNCH2   ND2&SYSNDX *               IF A(Q) < T THEN        00383
*                                      BEGIN COMMENT;                   00384
&YY      SETA  0-4                                                      00385
&XX      SETA  0                                                        00386
.L99     AIF   ('&QCHK' EQ 'G').L46                                     00387
         XC    0(&LENGTX,11),0(9) *          X := A(K);                 00388
         XC    0(&LENGTX,9),0(11) *          A(K) := A(Q);              00389
         XC    0(&LENGTX,11),0(9) *          A(Q) := X;                 00390
         AGO   .L147                                                    00391
.L46     L&TYPX    6,0(11)                                              00392
         L&TYPX    0,0(9) *                X:=A(K);                     00393
         ST&TYPX    6,0(9) *                A(K):=A(Q);                 00394
         ST&TYPX   0,0(11) *               A(Q):=X;                     00395
.L147    AIF   (&EXTRA EQ 0).L47                                        00396
&XX      SETA  &XX+1                                                    00397
&YY      SETA  &YY+4                                                    00398
         S     9,DA&SYSNDX+&YY                                          00399
         S     11,DA&SYSNDX+&YY                                         00400
         AIF   (&XX LE &EXTRA).L99                                      00401
.L47     SR    11,1 *                  Q := Q - 1;                      00402
*                                      COMMENT;                         00403
         B     ND1&SYSNDX *               GO TO L (ND1);                00404
*                                      END                              00405
ND2&SYSNDX BXH   11,8,LP2&SYSNDX *          END FOR Q;                  00406
         LR    11,9 *                  Q := K - 1;                      00407
         SR    11,1                                                     00408
         B     M&SYSNDX *                 GO TO M;                      00409
*                                      END                              00410
ND1&SYSNDX BXLE  9,10,LP1&SYSNDX *       L: END FOR K;                  00411
*                                      COMMENT;                         00412
         AIF   ('&QCHK' EQ 'G').L48                                     00413
M&SYSNDX MVC   0(&LENGTX,12),0(11) *      M: A(I) := A(Q);              00414
         MVC   0(&LENGTX,11),TMP&SYSNDX *       A(Q) := T;              00415
         AIF   (&EXTRA EQ 0).L49                                        00416
&XX      SETA  0                                                        00417
&YY      SETA  0                                                        00418
&ZZ      SETA  &LENGTX                                                  00419
.L876    S     11,DA&SYSNDX+&YY                                         00420
         S     12,DA&SYSNDX+&YY                                         00421
         AIF   (&XX EQ &EXTRA).L49                                      00422
&YY      SETA  &YY+4                                                    00423
         MVC   0(&LENGTX,11),&ZZ.(2)                                    00424
&XX      SETA  &XX+1                                                    00425
         MVC   0(&LENGTX,12),0(11)                                      00426
&ZZ      SETA  &ZZ+&LENGTX                                              00427
         AGO   .L876                                                    00428
.L48     ANOP                                                           00429
M&SYSNDX L&TYPX    6,0(11) *            M: A(I):=A(Q);                  00430
         ST&TYPX    6,0(12)                                             00431
         ST&TYPX    4,0(11) *               A(Q):=T;                    00432
         AIF   (&EXTRA EQ 0).L49                                        00433
&XX      SETA  0                                                        00434
&YY      SETA  0                                                        00435
&ZZ      SETA  &LENGTX                                                  00436
.L765    S     11,DA&SYSNDX+&YY                                         00437
         S     12,DA&SYSNDX+&YY                                         00438
         AIF   (&XX EQ &EXTRA).L49                                      00439
         L&TYPX 0,0(11)                                                 00440
         ST&TYPX 0,0(12)                                                00441
         L&TYPX 4,TMP&SYSNDX+&ZZ                                        00442
         ST&TYPX 4,0(11)                                                00443
&XX      SETA  &XX+1                                                    00444
&YY      SETA  &YY+4                                                    00445
&ZZ      SETA  &ZZ+&LENGTX                                              00446
         AGO   .L765                                                    00447
.L49     ANOP                                                           00448
*                                      COMMENT;                         00449
         LR    6,11 *                  IF 2 *Q > I+J THEN               00450
         SR    11,1                                                     00451
         SLA    6,1                                                     00452
         SR    6,12                                                     00453
         SR    6,13                                                     00454
         BNP   LWR&SYSNDX *               BEGIN                         00455
         ST    12,LT&SYSNDX.(5) *           LT(M) := I;                 00456
         ST    11,UT&SYSNDX.(5) *          UT(M) := Q - 1;              00457
         LA    11,&LT2.(11)                                             00458
         LR    12,11 *                 I:=Q+1;                          00459
         B     UM&SYSNDX *                END                           00460
*                                      ELSE                             00461
*                                      BEGIN                            00462
LWR&SYSNDX ST    13,UT&SYSNDX.(5) *           UT(M) := J;               00463
         LR    13,11 *                 J:=Q-1;                          00464
         LA    11,&LT2.(11)                                             00465
         ST    11,LT&SYSNDX.(5) *          LT(M) := Q + 1;              00466
*                                      COMMENT;                         00467
UM&SYSNDX LA    5,4(5) *                M := M + 1;                     00468
         B     N&SYSNDX *                 GO TO N                       00469
*                                      END                              00470
L3E&SYSNDX CR    12,13 *                   ELSE IF I >= J THEN          00471
*                                      BEGIN COMMENT;                   00472
         BNL   P&SYSNDX *                 GO TO P                       00473
*                                      END                              00474
*                                      ELSE                             00475
*                                      BEGIN COMMENT;                   00476
         AIF   ('&OVRTYP' EQ 'NONE' OR '&TYPE' NE 'C').NP               00477
&QCHK    SETC  '&Q'                                                     00478
&TYPX    SETC  '&OVRTYP'                                                00479
         AIF   ('&TYPX' NE 'F').NP                                      00480
&TYPX    SETC  ' '                                                      00481
.NP      AIF   ('&QCHK' EQ 'B').L21                                     00482
         L&TYPX    0,&DISPL.(12)                                        00483
         C&TYPX    0,&DISPL.(13) *               IF A(I) > A(J) THEN    00484
         AGO   .L22                                                     00485
.L21     AIF   ('&TYPX' NE 'P').L23                                     00486
         CP    &STRTKX.(&KYLGTX,12),&STRTKX.(&KYLGTX,13)                00487
*                                     IF A(I) > A(J) THEN               00488
         AGO   .L22                                                     00489
.L23     CLC   &STRTKX.(&KYLGTX,12),&STRTKX.(13)                        00490
*                                     IF A(I) > A(J) THEN               00491
.L22     AIF   ('&OVRTYP' EQ 'NONE' OR '&TYPE' NE 'C').K2               00492
&QCHK    SETC  'B'                                                      00493
&TYPX    SETC  'C'                                                      00494
.K2      BN&BRNCH2   P&SYSNDX                                           00495
*                                      BEGIN                            00496
&YY      SETA  0-4                                                      00497
&XX      SETA  0                                                        00498
         AIF   ('&QCHK' EQ 'G').L410                                    00499
.L999    AIF   ('&QCHK' EQ 'G').L987                                    00500
         XC    0(&LENGTX,12),0(13) *           X := A(I);               00501
         XC    0(&LENGTX,13),0(12) *           A(I) := A(J);            00502
         XC    0(&LENGTX,12),0(13) *           A(J) := X;               00503
         AGO   .L41129                                                  00504
.L987    L&TYPX 0,0(12)                                                 00505
.L410    L&TYPX    6,0(13) *               X:=A(I);                     00506
         ST&TYPX    0,0(13) *               A(I):=A(J);                 00507
         ST&TYPX    6,0(12) *               A(J):=X;                    00508
.L41129  AIF   (&EXTRA EQ 0).L411                                       00509
&XX      SETA  &XX+1                                                    00510
&YY      SETA  &YY+4                                                    00511
         S     12,DA&SYSNDX+&YY                                         00512
         S     13,DA&SYSNDX+&YY                                         00513
         AIF   (&XX LE &EXTRA).L999                                     00514
.L411    ANOP                                                           00515
*                                      END;                             00516
*                                      COMMENT;                         00517
P&SYSNDX SR    5,14 *               P: M := M - 1;                      00518
         BM    QT&SYSNDX *                IF M > 0 THEN                 00519
*                                      BEGIN                            00520
         L     12,LT&SYSNDX.(5) *           I := LT(M);                 00521
         L     13,UT&SYSNDX.(5) *           J := UT(M);                 00522
         B     N&SYSNDX *                 GO TO N                       00523
*                                      END;                             00524
*                                      END                              00525
QT&SYSNDX L     13,R13&SYSNDX *            END QUICKERSORT              00526
         AIF   ('&INLINE' EQ 'NO').F100                                 00527
         LM    14,12,S&SYSNDX                                           00528
         B     YY&SYSNDX                                                00529
S&SYSNDX DS    15F                                                      00530
         AGO   .F250                                                    00531
.F100    LM    14,12,12(13) *          RESTORE REGISTERS                00532
         BR    14 *                    RETURN TO CALLING PROGRAM        00533
.F250    ANOP                                                           00534
UT&SYSNDX DS    20F *                   AUXILLARY STORAGE FOR UT ARRAY  00535
LT&SYSNDX DS    20F *                   AUXILLARY STORAGE FOR LT ARRAY  00536
         AIF   (&EXTRA GT 0).LK                                         00537
         AIF   ('&QCHK' EQ 'G').LL                                      00538
TMP&SYSNDX DS    CL&LENGTH *                  TEMP STORAGE FOR COMPARES 00539
         AGO   .LL                                                      00540
.LK      ANOP                                                           00541
&YY      SETA  &EXTRA+1                                                 00542
TMP&SYSNDX DS  &YY.CL&LENGTX *                 TEMP STORAGE FOR COMPARE 00543
.LL      ANOP                                                           00544
R13&SYSNDX DS    F *                     SAVE AREA FOR REGISTER 13      00545
         AIF   (&EXTRA EQ 0).LM                                         00546
&YY      SETA  &EXTRA+1                                                 00547
DA&SYSNDX DS   &YY.F *                    SAVE AREA FOR ADDRESS CHANGES 00548
.LM      AIF   ('&INLINE' EQ 'NO').LMN                                  00549
YY&SYSNDX NOPR 12                                                       00550
.LMN     MEND                                                           00551
         EJECT                                                          00552
         PRINT ON                                                       00553
MLPALIST CSECT                                                          00554
         REGISTER                                                       00555
         B     12(,R15)                                                 00556
         DC    CL8'BLOCKS'                                              00557
         STM   R14,R12,12(R13)                                          00558
         LR    R12,R15            USE REG 12 AS BASE                    00559
         USING MLPALIST,R12                                             00560
         GETMAIN RU,LV=LENGTH                                           00561
         ST    R13,4(,R1)         CHAIN SAVEAREAS                       00562
         ST    R1,8(,R13)         TOGETHER                              00563
         LR    R13,R1                                                   00564
         USING SAVEAREA,R13                                             00565
         SPACE 3                                                        00566
         MVC   RENTDCB(DCBLEN),SYSPRINT   MOVE DCB TO DSECT             00567
         MVC   OPENL(OPENLEN),OPEN        MOVE OPEN STMTS TO DSECT      00568
         LA    R1,OPENL           LETS OPEN THE PRINTER                 00569
         OPEN  RENTDCB,MF=(E,(1)) WELL OPEN SAYS ME                     00570
         MVI   PRINT,C' '         CLEAR OUT THE PRINT LINE              00571
         MVC   PRINT+1(L'PRINT-1),PRINT                                 00572
         SLR   R1,R1              CLEAR REG 1                           00573
         ST    R1,ENTRIES         INIT VALUE                            00574
         LA    R1,TABLE           GET THE ARRAY START ADDR              00575
         ST    R1,PARM            SAVE IT IN PARM FIELD                 00576
         ST    R1,CURRENT         SAVE FOR USE AS COUNTER               00577
         LA    R1,ENTRIES         GET THE # OF ENTRIES POINTER          00578
         ST    R1,PARM+4          SAVE THE SECOND PARM FIELD            00579
         SPACE 3                                                        00580
         L     R3,CVTPTR          GET THE CVT POINTER                   00581
         USING CVT,R3             GET ADDRESSABILITY TO CVT             00582
         L     R2,CVTQLPAQ        GET CDE CHAIN POINTER FROM CVT        00583
         USING CDENTRY,R2         SET UP ADDRESSABILITY TO CDE          00584
         SPACE 3                                                        00585
CDELOOP  EQU   *                                                        00586
         TM    CDATTR,CDNIP       WAS THIS CDE LOADED BY MLPA           00587
         BO    MLPALOAD           YES IT WAS                            00588
NEXTCDE  EQU   *                                                        00589
         L     R2,CDCHAIN         GET THE NEXT LPA CDE ENTRY            00590
         LA    R2,0(,R2)          CLEAR BYTE JUST IN CASE               00591
         LTR   R2,R2              CHECK FOR END OF CHAIN                00592
         BNZ   CDELOOP            NOPE GO GET ANOTHER CDE               00593
         SPACE 3                                                        00594
         L     R1,CURRENT         GET THE CURRENT POINTER               00595
         MVC   0(L'PRINT,R1),PRINT  CLEAR OUT END OF TABLE              00596
         LA    R1,PARM            SET UP FOR SORT                       00597
         L     R15,=V(ALPHA)      LETS SORT IT ALPHA                    00598
         BALR  R14,R15            GO DO IT                              00599
         MVI   PRINT,C'1'                                               00600
         MVC   PRINT+1(L'ALPHAHED),ALPHAHED MOVE IN HEADING             00601
         BAL   R10,PRINTIT        PRINT HEADING                         00602
         MVI   PRINT,C'0'                                               00603
         MVC   PRINT+1(L'HEADER2),HEADER2                               00604
         BAL   R10,PRINTIT                                              00605
         L     R2,ENTRIES         HOW MANY ENTRIES DO WE HAVE           00606
         LA    R2,1(,R2)          BUMP FOR DIVIDE                       00607
         SRL   R2,1               DIVIDE BY 2                           00608
         LR    R4,R2              SAVE FOR LATER                        00609
         LA    R3,TABLE           GET START OF TABLE                    00610
         LA    R6,56              MAX LINES PER PAGE                    00611
PRTA     EQU   *                                                        00612
         MVC   PRINT+1(L'CURENTRY),0(R3) GET THE CURRENT ENTRY          00613
         MVC   PRINT+60(L'CURENTRY),48(R3) GET NEXT ENTRY               00614
         BAL   R10,PRINTIT        NOW PRINTIT                           00615
         BCTR  R6,R0              SUBTRACE 1 FROM LINE COUNT            00616
         LTR   R6,R6              CHECK FOR FULL PAGE                   00617
         BNZ   NOHEADA                                                  00618
         MVI   PRINT,C'1'                                               00619
         MVC   PRINT+1(L'ALPHAHED),ALPHAHED PRINT HEADING LINE          00620
         BAL   R10,PRINTIT                                              00621
         MVI   PRINT,C'0'                                               00622
         MVC   PRINT+1(L'HEADER2),HEADER2                               00623
         BAL   R10,PRINTIT                                              00624
NOHEADA  EQU   *                                                        00625
         LA    R3,96(,R3)         GET NEXT CDE POINTER                  00626
         BCT   R2,PRTA            GET NEXT ONE                          00627
         LA    R1,PARM            SET UP FOR SORT                       00628
         L     R15,=V(NUMER)    LETS SORT IT NUMERIC                    00629
         BALR  R14,R15            DO IT                                 00630
         MVI   PRINT,C'1'                                               00631
         MVC   PRINT+1(L'NUMHED),NUMHED FIX UP HEADING                  00632
         BAL   R10,PRINTIT                                              00633
         MVI   PRINT,C'0'                                               00634
         MVC   PRINT+1(L'HEADER2),HEADER2                               00635
         BAL   R10,PRINTIT                                              00636
         LA    R3,TABLE           START OF TABLE                        00637
         LA    R6,56              MAX LINES PER PAGE                    00638
PRTN     EQU   *                                                        00639
         MVC   PRINT+1(L'CURENTRY),0(R3)  GET START OF CDE TAB          00640
         MVC   PRINT+60(L'CURENTRY),48(R3)  GET NEXT ENTRY              00641
         BAL   R10,PRINTIT        GO PRINT TABLE                        00642
         BCTR  R6,R0                                                    00643
         LA    R3,96(,R3)         GET NEXT ENTRY                        00644
         LTR   R6,R6                                                    00645
         BNZ   NOHEADN                                                  00646
         MVI   PRINT,C'1'                                               00647
         MVC   PRINT+1(L'NUMHED),NUMHED                                 00648
         MVI   PRINT,C'0'                                               00649
         MVC   PRINT+1(L'HEADER2),HEADER2                               00650
         BAL   R10,PRINTIT                                              00651
NOHEADN  EQU   *                                                        00652
         BCT   R4,PRTN            ARE WE DONE YET?                      00653
         LA    R1,CLOSEL                                                00654
         CLOSE RENTDCB,MF=(E,(1))                                       00655
         LR    R2,R13             SAVE ADDRESS FOR FREEMAIN             00656
         L     R13,4(,R13)        GET CALLERS SAVE AREA POINTER         00657
         FREEMAIN RU,A=(R2),LV=LENGTH     FREE UP SAVEAREA              00658
         LM    R14,R12,12(R13)    RELOAD CALLERS REGISTERS              00659
         SLR   R15,R15            SET RETURN CODE OF ZERO               00660
         BR    R14                RETURN TO CALLER                      00661
         SPACE 3                                                        00662
MLPALOAD EQU   *                                                        00663
         TM    CDATTR,CDNIC       IS MODULE INPROCESS OF LOAD ?         00664
         BO    NEXTCDE            YES GO GET ANOTHER ONE                00665
         TM    CDATTR2,CDREL      IS MODULE INACTIVE ?                  00666
         BO    NEXTCDE            YES GO GET ANOTHER                    00667
         MVI   CURENTRY,C' '      CLEAR TO BLANKS                       00668
         MVC   CURENTRY+1(L'CURENTRY-1),CURENTRY                        00669
         MVC   BNAME(L'CDNAME),CDNAME THE CDE NAME                      00670
         LA    R1,CDENTPT         GET THE MODULE ENTRY POINT            00671
         LA    R10,BEPA           THIS IS HIS ENTRY POINT               00672
         BAL   R14,UNPACK         MAKE IT READABLE                      00673
         TM    CDATTR,CDMIN       IS IT A MINOR CDE ?                   00674
         BO    MINORCDE           YES GO FIX HIM UP                     00675
         ST    R2,R2SAVE          SAVE FOR LATER                        00676
XLIST    EQU   *                                                        00677
         L     R4,CDXLMJP         GET THE EXTENT LIST ADDR              00678
         USING XTLST,R4           SET UP ADDR TO IT                     00679
         LA    R1,XTLMSBLA        GET LENGTH                            00680
         LA    R10,BLENGTH                                              00681
         BAL   R14,UNPACK         MAKE IT READABLE                      00682
         LA    R1,XTLMSBAA        GET MAIN STORAGE ADDRESS              00683
         LA    R10,BLOCAT         WHERE IS HE IN STORAGE                00684
         BAL   R14,UNPACK         MAKE IT READABLE                      00685
         L     R1,ENTRIES         HOW MANY ENTRIES DO WE HAVE?          00686
         LA    R1,1(,R1)          BUMP THE COUNTER                      00687
         ST    R1,ENTRIES         SAVE THE NEW NUMBER                   00688
         L     R1,CURRENT         SAVE CURRENT POINTER                  00689
         MVC   0(L'CURENTRY,R1),CURENTRY  SAVE THE CONTENTS             00690
         LA    R1,48(,R1)         BUMP BY THE LENGTH                    00691
         ST    R1,CURRENT         SAVE THIS ENTRY                       00692
         L     R2,R2SAVE          RELOAD REG 2                          00693
         B     NEXTCDE            GO GET ANOTHER NAME                   00694
         SPACE 3                                                        00695
OPEN     OPEN  (SYSPRINT,(OUTPUT)),MF=L                                 00696
CLOSE    CLOSE (SYSPRINT),MF=L                                          00697
OPENLEN  EQU   *-OPEN                                                   00698
         SPACE 3                                                        00699
MINORCDE EQU   *                                                        00700
         ST    R2,R2SAVE          WE NEED HIM LATER FOR CHAIN           00701
         L     R2,CDXLMJP         GO GET HIS MAJOR CDE                  00702
         MVC   BMAJOR(L'CDNAME),CDNAME GET THE MAJOR NAME               00703
         B     XLIST                                                    00704
         SPACE 3                                                        00705
UNPACK   EQU   *                                                        00706
         UNPK  ANSWER,0(5,R1)     PUT DATA INTO AN AREA TO WORK ON      00707
         TR    ANSWER(8),TRANTAB  TURN IT INTO READABLE DATA            00708
         MVC   2(6,R10),ANSWER+2  MOVE TO PRINT AREA                    00709
         BR    R14                RETURN TO CALLER                      00710
         SPACE 3                                                        00711
PRINTIT  EQU   *                                                        00712
         PUT   RENTDCB,PRINT                                            00713
         MVI   PRINT,C' '         CLEAR THE PRINT LINE                  00714
         MVC   PRINT+1(L'PRINT-1),PRINT                                 00715
         BR    R10                                                      00716
         PRINT NOGEN                                                    00717
         SPACE 3                                                        00718
SYSPRINT DCB   DDNAME=SYSPRINT,BLKSIZE=121,RECFM=FA,LRECL=121,    ******00719
               DSORG=PS,MACRF=(PM)                                      00720
DCBLEN   EQU   *-SYSPRINT                                               00721
TRANTAB  EQU   *-240                                                    00722
         DC    C'0123456789ABCDEF'                                      00723
         LTORG                                                          00724
ALPHAHED DC    C'FIXED AND MODIFIED LINK PACK MAP - ALPHABETICALLY BY N*00725
               AME'                                                     00726
HEADER2  DC   C' NAME       LOCAT    LNGTH    ENTRY  MAJOR LPDE        *00727
                    NAME       LOCAT    LNGTH    ENTRY   MAJOR LPDE'    00728
NUMHED   DC   C'FIXED AND MODIFIED LINK PACK MAP - NUMERICALLY BY LOCAT*00729
               ION'                                                     00730
         SPACE 3                                                        00731
SAVEAREA DSECT                                                          00732
         DS    18F                                                      00733
R2SAVE   DS    F                                                        00734
ENTRIES  DS    F                                                        00735
PARM     DS    2F                                                       00736
CURRENT  DS    F                                                        00737
RENTDCB  DCB   DDNAME=SYSPRINT,BLKSIZE=121,RECFM=FA,LRECL=121,        **00738
               DSORG=PS,MACRF=(PM)                                      00739
PRINT    DS    CL121                                                    00740
CURENTRY DS    0CL48                                                    00741
         DS    C                                                        00742
BNAME    DS    CL8                                                      00743
         DS    C                                                        00744
BLOCAT   DS    CL8                                                      00745
         DS    C                                                        00746
BLENGTH  DS    CL8                                                      00747
         DS    C                                                        00748
BEPA     DS    CL8                                                      00749
         DS    C                                                        00750
BMAJOR   DS    CL8                                                      00751
         DS    CL3             FILL OUT TO 48 BYTES                     00752
ANSWER   DS    CL9                                                      00753
OPENL    OPEN  SYSPRINT,MF=L                                            00754
CLOSEL   CLOSE SYSPRINT,MF=L                                            00755
TABLE    DS    12000F                                                   00756
         DS    0D                                                       00757
LENGTH   EQU   *-SAVEAREA                                               00758
         DROP  R13                                                      00759
         SPACE 3                                                        00760
         IHAPSA                                                         00761
         CVT   DSECT=YES                                                00762
         IHACDE                                                         00763
         IHAXTLST                                                       00764
*  CREATE CSECT TO SORT LIST INTO ALPHAMERIC ORDER  ON MODULE NAME      00765
     QKSRT1 ALPHA,C,LENGTH=48,STRTKY=2,KYLGTH=8                         00766
*  CREATE CSECT TO SORT LIST INTO NUMERICAL ORDER ON ADDRESS            00767
     QKSRT1 NUMER,C,LENGTH=48,STRTKY=12,KYLGTH=6                        00768
         END                                                            00769
